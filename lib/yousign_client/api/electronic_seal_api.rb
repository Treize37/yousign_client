=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

OpenAPI spec version: 3.0
Contact: contact@yousign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.42
=end

module YousignClient
  class ElectronicSealApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Download electronic seal audit trail
    # Download electronic seal audit trail
    # @param electronic_seal_id 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def download_electronic_seal_audit_trail(electronic_seal_id, opts = {})
      data, _status_code, _headers = download_electronic_seal_audit_trail_with_http_info(electronic_seal_id, opts)
      data
    end

    # Download electronic seal audit trail
    # Download electronic seal audit trail
    # @param electronic_seal_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def download_electronic_seal_audit_trail_with_http_info(electronic_seal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronicSealApi.download_electronic_seal_audit_trail ...'
      end
      # verify the required parameter 'electronic_seal_id' is set
      if @api_client.config.client_side_validation && electronic_seal_id.nil?
        fail ArgumentError, "Missing the required parameter 'electronic_seal_id' when calling ElectronicSealApi.download_electronic_seal_audit_trail"
      end
      # resource path
      local_var_path = '/electronic_seals/{electronicSealId}/audit_trails/download'.sub('{' + 'electronicSealId' + '}', electronic_seal_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronicSealApi#download_electronic_seal_audit_trail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download electronic seal document
    # Download electronic seal document
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def download_electronic_seal_document(id, opts = {})
      data, _status_code, _headers = download_electronic_seal_document_with_http_info(id, opts)
      data
    end

    # Download electronic seal document
    # Download electronic seal document
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def download_electronic_seal_document_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronicSealApi.download_electronic_seal_document ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ElectronicSealApi.download_electronic_seal_document"
      end
      # resource path
      local_var_path = '/electronic_seal_documents/{id}/download'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronicSealApi#download_electronic_seal_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get electronic seal
    # Get an electronic seal
    # @param electronic_seal_id 
    # @param [Hash] opts the optional parameters
    # @return [Paths1electronicSealspostresponses201contentapplication1jsonschema]
    def get_electronic_seal(electronic_seal_id, opts = {})
      data, _status_code, _headers = get_electronic_seal_with_http_info(electronic_seal_id, opts)
      data
    end

    # Get electronic seal
    # Get an electronic seal
    # @param electronic_seal_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Paths1electronicSealspostresponses201contentapplication1jsonschema, Integer, Hash)>] Paths1electronicSealspostresponses201contentapplication1jsonschema data, response status code and response headers
    def get_electronic_seal_with_http_info(electronic_seal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronicSealApi.get_electronic_seal ...'
      end
      # verify the required parameter 'electronic_seal_id' is set
      if @api_client.config.client_side_validation && electronic_seal_id.nil?
        fail ArgumentError, "Missing the required parameter 'electronic_seal_id' when calling ElectronicSealApi.get_electronic_seal"
      end
      # resource path
      local_var_path = '/electronic_seals/{electronicSealId}'.sub('{' + 'electronicSealId' + '}', electronic_seal_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Paths1electronicSealspostresponses201contentapplication1jsonschema' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronicSealApi#get_electronic_seal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get electronic seal audit trail
    # Get electronic seal audit trail
    # @param electronic_seal_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006]
    def get_electronic_seal_audit_trail(electronic_seal_id, opts = {})
      data, _status_code, _headers = get_electronic_seal_audit_trail_with_http_info(electronic_seal_id, opts)
      data
    end

    # Get electronic seal audit trail
    # Get electronic seal audit trail
    # @param electronic_seal_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006, Integer, Hash)>] InlineResponse2006 data, response status code and response headers
    def get_electronic_seal_audit_trail_with_http_info(electronic_seal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronicSealApi.get_electronic_seal_audit_trail ...'
      end
      # verify the required parameter 'electronic_seal_id' is set
      if @api_client.config.client_side_validation && electronic_seal_id.nil?
        fail ArgumentError, "Missing the required parameter 'electronic_seal_id' when calling ElectronicSealApi.get_electronic_seal_audit_trail"
      end
      # resource path
      local_var_path = '/electronic_seals/{electronicSealId}/audit_trails'.sub('{' + 'electronicSealId' + '}', electronic_seal_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2006' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronicSealApi#get_electronic_seal_audit_trail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Electronic Seal
    # Create an electronic seal
    # @param [Hash] opts the optional parameters
    # @option opts [CreateElectronicSealPayload] :body 
    # @return [ElectronicSeal]
    def post_electronic_seals(opts = {})
      data, _status_code, _headers = post_electronic_seals_with_http_info(opts)
      data
    end

    # Create Electronic Seal
    # Create an electronic seal
    # @param [Hash] opts the optional parameters
    # @option opts [CreateElectronicSealPayload] :body 
    # @return [Array<(ElectronicSeal, Integer, Hash)>] ElectronicSeal data, response status code and response headers
    def post_electronic_seals_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronicSealApi.post_electronic_seals ...'
      end
      # resource path
      local_var_path = '/electronic_seals'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'ElectronicSeal' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronicSealApi#post_electronic_seals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload electronic seal document
    # Upload electronic seal document
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [String] :password 
    # @return [InlineResponse2011]
    def upload_electronic_seal_document(opts = {})
      data, _status_code, _headers = upload_electronic_seal_document_with_http_info(opts)
      data
    end

    # Upload electronic seal document
    # Upload electronic seal document
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [String] :password 
    # @return [Array<(InlineResponse2011, Integer, Hash)>] InlineResponse2011 data, response status code and response headers
    def upload_electronic_seal_document_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronicSealApi.upload_electronic_seal_document ...'
      end
      # resource path
      local_var_path = '/electronic_seal_documents'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['password'] = opts[:'password'] if !opts[:'password'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2011' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronicSealApi#upload_electronic_seal_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload electronic seal image
    # Upload electronic seal image
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [String] :name 
    # @return [InlineResponse201]
    def upload_electronic_seal_image(opts = {})
      data, _status_code, _headers = upload_electronic_seal_image_with_http_info(opts)
      data
    end

    # Upload electronic seal image
    # Upload electronic seal image
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file 
    # @option opts [String] :name 
    # @return [Array<(InlineResponse201, Integer, Hash)>] InlineResponse201 data, response status code and response headers
    def upload_electronic_seal_image_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronicSealApi.upload_electronic_seal_image ...'
      end
      # resource path
      local_var_path = '/electronic_seal_images'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse201' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronicSealApi#upload_electronic_seal_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
