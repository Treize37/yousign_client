=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

OpenAPI spec version: 3.0
Contact: contact@yousign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.42
=end

module YousignClient
  class ConsumptionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get consumptions
    # Get signatures consumption by source.
    # @param from \&quot;from\&quot; date must be inferior or equal to \&quot;to\&quot;
    # @param to 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authentication_key 
    # @return [InlineResponse2004]
    def get_consumptions(from, to, opts = {})
      data, _status_code, _headers = get_consumptions_with_http_info(from, to, opts)
      data
    end

    # Get consumptions
    # Get signatures consumption by source.
    # @param from \&quot;from\&quot; date must be inferior or equal to \&quot;to\&quot;
    # @param to 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authentication_key 
    # @return [Array<(InlineResponse2004, Integer, Hash)>] InlineResponse2004 data, response status code and response headers
    def get_consumptions_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumptionApi.get_consumptions ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ConsumptionApi.get_consumptions"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling ConsumptionApi.get_consumptions"
      end
      # resource path
      local_var_path = '/consumptions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'authentication_key'] = opts[:'authentication_key'] if !opts[:'authentication_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2004' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumptionApi#get_consumptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export consumption data
    # Get a binary .csv file containing all the underlying data of signatures consumption.
    # @param from \&quot;from\&quot; date must be inferior or equal to \&quot;to\&quot;
    # @param to 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authentication_key 
    # @return [String]
    def get_consumptions_export(from, to, opts = {})
      data, _status_code, _headers = get_consumptions_export_with_http_info(from, to, opts)
      data
    end

    # Export consumption data
    # Get a binary .csv file containing all the underlying data of signatures consumption.
    # @param from \&quot;from\&quot; date must be inferior or equal to \&quot;to\&quot;
    # @param to 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authentication_key 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_consumptions_export_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumptionApi.get_consumptions_export ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ConsumptionApi.get_consumptions_export"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling ConsumptionApi.get_consumptions_export"
      end
      # resource path
      local_var_path = '/consumptions/export'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'authentication_key'] = opts[:'authentication_key'] if !opts[:'authentication_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumptionApi#get_consumptions_export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
