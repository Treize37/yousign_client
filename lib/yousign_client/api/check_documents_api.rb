=begin
#Yousign API Swagger

#For your information, the Yousign API documentation is available at https://dev.yousign.com/

The version of the OpenAPI document: 2.1
Contact: support@yousign.fr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module YousignClient
  class CheckDocumentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get informations about a bank document (RIB)
    # @param id [String] 
    # @param authorization [String] Authentication credentials for HTTP authentication
    # @param [Hash] opts the optional parameters
    # @return [CheckDocumentBankAccountsOutput]
    def check_document_bank_accounts_id_get(id, authorization, opts = {})
      data, _status_code, _headers = check_document_bank_accounts_id_get_with_http_info(id, authorization, opts)
      data
    end

    # Get informations about a bank document (RIB)
    # @param id [String] 
    # @param authorization [String] Authentication credentials for HTTP authentication
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckDocumentBankAccountsOutput, Integer, Hash)>] CheckDocumentBankAccountsOutput data, response status code and response headers
    def check_document_bank_accounts_id_get_with_http_info(id, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckDocumentsApi.check_document_bank_accounts_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CheckDocumentsApi.check_document_bank_accounts_id_get"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CheckDocumentsApi.check_document_bank_accounts_id_get"
      end
      # resource path
      local_var_path = '/check-document/bank_accounts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CheckDocumentBankAccountsOutput' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckDocumentsApi#check_document_bank_accounts_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify a bank document (RIB)
    # @param authorization [String] Authentication credentials for HTTP authentication
    # @param content_type [String] The MIME type of the body of the request
    # @param body [CheckDocumentBankAccountsInput] 
    # @param [Hash] opts the optional parameters
    # @return [CheckDocumentBankAccountsOutput]
    def check_document_bank_accounts_post(authorization, content_type, body, opts = {})
      data, _status_code, _headers = check_document_bank_accounts_post_with_http_info(authorization, content_type, body, opts)
      data
    end

    # Verify a bank document (RIB)
    # @param authorization [String] Authentication credentials for HTTP authentication
    # @param content_type [String] The MIME type of the body of the request
    # @param body [CheckDocumentBankAccountsInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckDocumentBankAccountsOutput, Integer, Hash)>] CheckDocumentBankAccountsOutput data, response status code and response headers
    def check_document_bank_accounts_post_with_http_info(authorization, content_type, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckDocumentsApi.check_document_bank_accounts_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CheckDocumentsApi.check_document_bank_accounts_post"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling CheckDocumentsApi.check_document_bank_accounts_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CheckDocumentsApi.check_document_bank_accounts_post"
      end
      # resource path
      local_var_path = '/check-document/bank_accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'CheckDocumentBankAccountsOutput' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckDocumentsApi#check_document_bank_accounts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get informations about an identity document (passport, id cards)
    # @param id [String] 
    # @param authorization [String] Authentication credentials for HTTP authentication
    # @param [Hash] opts the optional parameters
    # @return [CheckDocumentIdentitiesOutput]
    def check_document_identities_id_get(id, authorization, opts = {})
      data, _status_code, _headers = check_document_identities_id_get_with_http_info(id, authorization, opts)
      data
    end

    # Get informations about an identity document (passport, id cards)
    # @param id [String] 
    # @param authorization [String] Authentication credentials for HTTP authentication
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckDocumentIdentitiesOutput, Integer, Hash)>] CheckDocumentIdentitiesOutput data, response status code and response headers
    def check_document_identities_id_get_with_http_info(id, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckDocumentsApi.check_document_identities_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CheckDocumentsApi.check_document_identities_id_get"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CheckDocumentsApi.check_document_identities_id_get"
      end
      # resource path
      local_var_path = '/check-document/identities/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CheckDocumentIdentitiesOutput' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckDocumentsApi#check_document_identities_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify an identity document (passport, id cards)
    # @param authorization [String] Authentication credentials for HTTP authentication
    # @param content_type [String] The MIME type of the body of the request
    # @param body [CheckDocumentIdentitiesInput] 
    # @param [Hash] opts the optional parameters
    # @return [CheckDocumentIdentitiesOutput]
    def check_document_identities_post(authorization, content_type, body, opts = {})
      data, _status_code, _headers = check_document_identities_post_with_http_info(authorization, content_type, body, opts)
      data
    end

    # Verify an identity document (passport, id cards)
    # @param authorization [String] Authentication credentials for HTTP authentication
    # @param content_type [String] The MIME type of the body of the request
    # @param body [CheckDocumentIdentitiesInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckDocumentIdentitiesOutput, Integer, Hash)>] CheckDocumentIdentitiesOutput data, response status code and response headers
    def check_document_identities_post_with_http_info(authorization, content_type, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckDocumentsApi.check_document_identities_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CheckDocumentsApi.check_document_identities_post"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling CheckDocumentsApi.check_document_identities_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CheckDocumentsApi.check_document_identities_post"
      end
      # resource path
      local_var_path = '/check-document/identities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'CheckDocumentIdentitiesOutput' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckDocumentsApi#check_document_identities_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
