=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

OpenAPI spec version: 3.0
Contact: contact@yousign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.42
=end

module YousignClient
  class SignerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a signer
    # Delete a signer
    # @param signer_id Signer id
    # @param signature_request_id Signature request id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_signature_requests_signature_request_id_signers_signer_id(signer_id, signature_request_id, opts = {})
      delete_signature_requests_signature_request_id_signers_signer_id_with_http_info(signer_id, signature_request_id, opts)
      nil
    end

    # Delete a signer
    # Delete a signer
    # @param signer_id Signer id
    # @param signature_request_id Signature request id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signature_requests_signature_request_id_signers_signer_id_with_http_info(signer_id, signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.delete_signature_requests_signature_request_id_signers_signer_id ...'
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerApi.delete_signature_requests_signature_request_id_signers_signer_id"
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.delete_signature_requests_signature_request_id_signers_signer_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}'.sub('{' + 'signerId' + '}', signer_id.to_s).sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#delete_signature_requests_signature_request_id_signers_signer_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List signature request signers
    # List signers from a signature request
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<Signer>]
    def get_signature_requests_signature_request_id_signers(signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_signers_with_http_info(signature_request_id, opts)
      data
    end

    # List signature request signers
    # List signers from a signature request
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Signer>, Integer, Hash)>] Array<Signer> data, response status code and response headers
    def get_signature_requests_signature_request_id_signers_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.get_signature_requests_signature_request_id_signers ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.get_signature_requests_signature_request_id_signers"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Signer>' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#get_signature_requests_signature_request_id_signers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get signer audit trail
    # Get signer audit trail
    # @param signer_id Signer id
    # @param signature_request_id Signature request id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def get_signature_requests_signature_request_id_signers_signer_id_audit_trails(signer_id, signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_signers_signer_id_audit_trails_with_http_info(signer_id, signature_request_id, opts)
      data
    end

    # Get signer audit trail
    # Get signer audit trail
    # @param signer_id Signer id
    # @param signature_request_id Signature request id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Integer, Hash)>] InlineResponse2003 data, response status code and response headers
    def get_signature_requests_signature_request_id_signers_signer_id_audit_trails_with_http_info(signer_id, signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.get_signature_requests_signature_request_id_signers_signer_id_audit_trails ...'
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerApi.get_signature_requests_signature_request_id_signers_signer_id_audit_trails"
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.get_signature_requests_signature_request_id_signers_signer_id_audit_trails"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}/audit_trails'.sub('{' + 'signerId' + '}', signer_id.to_s).sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2003' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#get_signature_requests_signature_request_id_signers_signer_id_audit_trails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download audit trail PDF
    # Download audit trail PDF
    # @param signer_id Signer Id
    # @param signature_request_id Signature request Id
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_signers_signer_id_audit_trails_download(signer_id, signature_request_id, opts = {})
      data, _status_code, _headers = get_signers_signer_id_audit_trails_download_with_http_info(signer_id, signature_request_id, opts)
      data
    end

    # Download audit trail PDF
    # Download audit trail PDF
    # @param signer_id Signer Id
    # @param signature_request_id Signature request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_signers_signer_id_audit_trails_download_with_http_info(signer_id, signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.get_signers_signer_id_audit_trails_download ...'
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerApi.get_signers_signer_id_audit_trails_download"
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.get_signers_signer_id_audit_trails_download"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}/audit_trails/download'.sub('{' + 'signerId' + '}', signer_id.to_s).sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#get_signers_signer_id_audit_trails_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a signer
    # Get a signer
    # @param signer_id Signer id
    # @param signature_request_id Signature request id
    # @param [Hash] opts the optional parameters
    # @return [SignerWithSignatureLink]
    def get_signers_signers_id(signer_id, signature_request_id, opts = {})
      data, _status_code, _headers = get_signers_signers_id_with_http_info(signer_id, signature_request_id, opts)
      data
    end

    # Get a signer
    # Get a signer
    # @param signer_id Signer id
    # @param signature_request_id Signature request id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignerWithSignatureLink, Integer, Hash)>] SignerWithSignatureLink data, response status code and response headers
    def get_signers_signers_id_with_http_info(signer_id, signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.get_signers_signers_id ...'
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerApi.get_signers_signers_id"
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.get_signers_signers_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}'.sub('{' + 'signerId' + '}', signer_id.to_s).sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SignerWithSignatureLink' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#get_signers_signers_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a signer
    # Update a signer
    # @param signer_id Signer id
    # @param signature_request_id Signature request id
    # @param [Hash] opts the optional parameters
    # @option opts [SignersSignerIdBody] :body 
    # @return [Signer]
    def patch_signature_requests_signature_request_id_signers_signer_id(signer_id, signature_request_id, opts = {})
      data, _status_code, _headers = patch_signature_requests_signature_request_id_signers_signer_id_with_http_info(signer_id, signature_request_id, opts)
      data
    end

    # Update a signer
    # Update a signer
    # @param signer_id Signer id
    # @param signature_request_id Signature request id
    # @param [Hash] opts the optional parameters
    # @option opts [SignersSignerIdBody] :body 
    # @return [Array<(Signer, Integer, Hash)>] Signer data, response status code and response headers
    def patch_signature_requests_signature_request_id_signers_signer_id_with_http_info(signer_id, signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.patch_signature_requests_signature_request_id_signers_signer_id ...'
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerApi.patch_signature_requests_signature_request_id_signers_signer_id"
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.patch_signature_requests_signature_request_id_signers_signer_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}'.sub('{' + 'signerId' + '}', signer_id.to_s).sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Signer' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#patch_signature_requests_signature_request_id_signers_signer_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new signer
    # Create a new signer
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [SignatureRequestIdSignersBody] :body 
    # @return [Signer]
    def post_signature_requests_signature_request_id_signers(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_signers_with_http_info(signature_request_id, opts)
      data
    end

    # Create a new signer
    # Create a new signer
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [SignatureRequestIdSignersBody] :body 
    # @return [Array<(Signer, Integer, Hash)>] Signer data, response status code and response headers
    def post_signature_requests_signature_request_id_signers_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.post_signature_requests_signature_request_id_signers ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.post_signature_requests_signature_request_id_signers"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Signer' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#post_signature_requests_signature_request_id_signers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
