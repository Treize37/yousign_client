=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

OpenAPI spec version: 3.0
Contact: contact@yousign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.42
=end

module YousignClient
  class SignatureRequestApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a signature request
    # Delete a signature request (in draft status)
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_signature_requests_signature_request_id(signature_request_id, opts = {})
      delete_signature_requests_signature_request_id_with_http_info(signature_request_id, opts)
      nil
    end

    # Delete a signature request
    # Delete a signature request (in draft status)
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signature_requests_signature_request_id_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.delete_signature_requests_signature_request_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.delete_signature_requests_signature_request_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#delete_signature_requests_signature_request_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List signature requests
    # List signature requests
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filter by status
    # @option opts [String] :after After cursor (pagination)
    # @option opts [String] :external_id Filter by external_id
    # @option opts [Array<String>] :source Filter by source
    # @return [InlineResponse200]
    def get_signature_requests(opts = {})
      data, _status_code, _headers = get_signature_requests_with_http_info(opts)
      data
    end

    # List signature requests
    # List signature requests
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filter by status
    # @option opts [String] :after After cursor (pagination)
    # @option opts [String] :external_id Filter by external_id
    # @option opts [Array<String>] :source Filter by source
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def get_signature_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.get_signature_requests ...'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['draft', 'ongoing', 'done', 'deleted', 'expired', 'canceled', 'approval', 'rejected'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of draft, ongoing, done, deleted, expired, canceled, approval, rejected'
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !opts[:'source'].all? { |item| ['app', 'public_api'].include?(item) }
        fail ArgumentError, 'invalid value for "source", must include one of app, public_api'
      end
      # resource path
      local_var_path = '/signature_requests'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'source[]'] = @api_client.build_collection_param(opts[:'source'], :multi) if !opts[:'source'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse200' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#get_signature_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a signature request
    # Fetch a signature request
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [SignatureRequest]
    def get_signature_requests_signature_request_id(signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_with_http_info(signature_request_id, opts)
      data
    end

    # Fetch a signature request
    # Fetch a signature request
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignatureRequest, Integer, Hash)>] SignatureRequest data, response status code and response headers
    def get_signature_requests_signature_request_id_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.get_signature_requests_signature_request_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.get_signature_requests_signature_request_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SignatureRequest' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#get_signature_requests_signature_request_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download signature request audit trails
    # Download signature request audit trails
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_signature_requests_signature_request_id_audit_trails_download(signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_audit_trails_download_with_http_info(signature_request_id, opts)
      data
    end

    # Download signature request audit trails
    # Download signature request audit trails
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_signature_requests_signature_request_id_audit_trails_download_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.get_signature_requests_signature_request_id_audit_trails_download ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.get_signature_requests_signature_request_id_audit_trails_download"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/audit_trails/download'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip', 'application/pdf', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#get_signature_requests_signature_request_id_audit_trails_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Signature Request
    # Update a Signature Request
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [SignatureRequestsSignatureRequestIdBody] :body 
    # @return [SignatureRequest]
    def patch_signature_requests_signature_request_id(signature_request_id, opts = {})
      data, _status_code, _headers = patch_signature_requests_signature_request_id_with_http_info(signature_request_id, opts)
      data
    end

    # Update a Signature Request
    # Update a Signature Request
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [SignatureRequestsSignatureRequestIdBody] :body 
    # @return [Array<(SignatureRequest, Integer, Hash)>] SignatureRequest data, response status code and response headers
    def patch_signature_requests_signature_request_id_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.patch_signature_requests_signature_request_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.patch_signature_requests_signature_request_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'SignatureRequest' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#patch_signature_requests_signature_request_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Initiate a new signature request
    # Initiate a new signature request
    # @param [Hash] opts the optional parameters
    # @option opts [SignatureRequestsBody] :body 
    # @return [SignatureRequest]
    def post_signature_requests(opts = {})
      data, _status_code, _headers = post_signature_requests_with_http_info(opts)
      data
    end

    # Initiate a new signature request
    # Initiate a new signature request
    # @param [Hash] opts the optional parameters
    # @option opts [SignatureRequestsBody] :body 
    # @return [Array<(SignatureRequest, Integer, Hash)>] SignatureRequest data, response status code and response headers
    def post_signature_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.post_signature_requests ...'
      end
      # resource path
      local_var_path = '/signature_requests'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'SignatureRequest' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#post_signature_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a signature request
    # Cancel a signature request
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [SignatureRequestIdCancelBody] :body 
    # @return [SignatureRequest]
    def post_signature_requests_signature_request_id_cancel(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_cancel_with_http_info(signature_request_id, opts)
      data
    end

    # Cancel a signature request
    # Cancel a signature request
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [SignatureRequestIdCancelBody] :body 
    # @return [Array<(SignatureRequest, Integer, Hash)>] SignatureRequest data, response status code and response headers
    def post_signature_requests_signature_request_id_cancel_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.post_signature_requests_signature_request_id_cancel ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.post_signature_requests_signature_request_id_cancel"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/cancel'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'SignatureRequest' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#post_signature_requests_signature_request_id_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reactivate an expired signature request
    # Reactivate a signature request
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [SignatureRequestIdReactivateBody] :body 
    # @return [SignatureRequest]
    def post_signature_requests_signature_request_id_reactivate(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_reactivate_with_http_info(signature_request_id, opts)
      data
    end

    # Reactivate an expired signature request
    # Reactivate a signature request
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [SignatureRequestIdReactivateBody] :body 
    # @return [Array<(SignatureRequest, Integer, Hash)>] SignatureRequest data, response status code and response headers
    def post_signature_requests_signature_request_id_reactivate_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.post_signature_requests_signature_request_id_reactivate ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.post_signature_requests_signature_request_id_reactivate"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/reactivate'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'SignatureRequest' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#post_signature_requests_signature_request_id_reactivate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Activate a signature request
    # Activate a signature request
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [SignatureRequestActivated]
    def post_signature_requests_signature_request_id_signatures(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_signatures_with_http_info(signature_request_id, opts)
      data
    end

    # Activate a signature request
    # Activate a signature request
    # @param signature_request_id Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignatureRequestActivated, Integer, Hash)>] SignatureRequestActivated data, response status code and response headers
    def post_signature_requests_signature_request_id_signatures_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.post_signature_requests_signature_request_id_signatures ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.post_signature_requests_signature_request_id_signatures"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/activate'.sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SignatureRequestActivated' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#post_signature_requests_signature_request_id_signatures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send manual reminder to signer
    # Send manual reminder to signer
    # @param signer_id Signer id
    # @param signature_request_id Signature request id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_signature_requests_signature_request_id_signers_signer_id_send_reminder(signer_id, signature_request_id, opts = {})
      post_signature_requests_signature_request_id_signers_signer_id_send_reminder_with_http_info(signer_id, signature_request_id, opts)
      nil
    end

    # Send manual reminder to signer
    # Send manual reminder to signer
    # @param signer_id Signer id
    # @param signature_request_id Signature request id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_signature_requests_signature_request_id_signers_signer_id_send_reminder_with_http_info(signer_id, signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.post_signature_requests_signature_request_id_signers_signer_id_send_reminder ...'
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignatureRequestApi.post_signature_requests_signature_request_id_signers_signer_id_send_reminder"
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.post_signature_requests_signature_request_id_signers_signer_id_send_reminder"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}/send_reminder'.sub('{' + 'signerId' + '}', signer_id.to_s).sub('{' + 'signatureRequestId' + '}', signature_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#post_signature_requests_signature_request_id_signers_signer_id_send_reminder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
