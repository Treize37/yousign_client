=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

OpenAPI spec version: 3.0
Contact: contact@yousign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.42
=end

require 'date'

module YousignClient
  class CustomExperienceInput
    attr_accessor :name

    attr_accessor :landing_page_disabled

    attr_accessor :side_panel_disabled

    attr_accessor :background_color

    attr_accessor :button_color

    attr_accessor :text_color

    attr_accessor :text_button_color

    attr_accessor :disabled_notifications

    attr_accessor :email_logo_disabled

    attr_accessor :email_header_text_disabled

    attr_accessor :email_footer_signature_disabled

    attr_accessor :email_expiration_text_disabled

    attr_accessor :redirect_urls

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'landing_page_disabled' => :'landing_page_disabled',
        :'side_panel_disabled' => :'side_panel_disabled',
        :'background_color' => :'background_color',
        :'button_color' => :'button_color',
        :'text_color' => :'text_color',
        :'text_button_color' => :'text_button_color',
        :'disabled_notifications' => :'disabled_notifications',
        :'email_logo_disabled' => :'email_logo_disabled',
        :'email_header_text_disabled' => :'email_header_text_disabled',
        :'email_footer_signature_disabled' => :'email_footer_signature_disabled',
        :'email_expiration_text_disabled' => :'email_expiration_text_disabled',
        :'redirect_urls' => :'redirect_urls'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'Object',
        :'landing_page_disabled' => :'Object',
        :'side_panel_disabled' => :'Object',
        :'background_color' => :'Object',
        :'button_color' => :'Object',
        :'text_color' => :'Object',
        :'text_button_color' => :'Object',
        :'disabled_notifications' => :'Object',
        :'email_logo_disabled' => :'Object',
        :'email_header_text_disabled' => :'Object',
        :'email_footer_signature_disabled' => :'Object',
        :'email_expiration_text_disabled' => :'Object',
        :'redirect_urls' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'landing_page_disabled',
        :'side_panel_disabled',
        :'background_color',
        :'button_color',
        :'text_color',
        :'text_button_color',
        :'disabled_notifications',
        :'email_logo_disabled',
        :'email_header_text_disabled',
        :'email_footer_signature_disabled',
        :'email_expiration_text_disabled',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `YousignClient::CustomExperienceInput` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `YousignClient::CustomExperienceInput`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'landing_page_disabled')
        self.landing_page_disabled = attributes[:'landing_page_disabled']
      else
        self.landing_page_disabled = false
      end

      if attributes.key?(:'side_panel_disabled')
        self.side_panel_disabled = attributes[:'side_panel_disabled']
      else
        self.side_panel_disabled = false
      end

      if attributes.key?(:'background_color')
        self.background_color = attributes[:'background_color']
      end

      if attributes.key?(:'button_color')
        self.button_color = attributes[:'button_color']
      end

      if attributes.key?(:'text_color')
        self.text_color = attributes[:'text_color']
      end

      if attributes.key?(:'text_button_color')
        self.text_button_color = attributes[:'text_button_color']
      end

      if attributes.key?(:'disabled_notifications')
        if (value = attributes[:'disabled_notifications']).is_a?(Array)
          self.disabled_notifications = value
        end
      end

      if attributes.key?(:'email_logo_disabled')
        self.email_logo_disabled = attributes[:'email_logo_disabled']
      else
        self.email_logo_disabled = false
      end

      if attributes.key?(:'email_header_text_disabled')
        self.email_header_text_disabled = attributes[:'email_header_text_disabled']
      else
        self.email_header_text_disabled = false
      end

      if attributes.key?(:'email_footer_signature_disabled')
        self.email_footer_signature_disabled = attributes[:'email_footer_signature_disabled']
      else
        self.email_footer_signature_disabled = false
      end

      if attributes.key?(:'email_expiration_text_disabled')
        self.email_expiration_text_disabled = attributes[:'email_expiration_text_disabled']
      else
        self.email_expiration_text_disabled = false
      end

      if attributes.key?(:'redirect_urls')
        self.redirect_urls = attributes[:'redirect_urls']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          landing_page_disabled == o.landing_page_disabled &&
          side_panel_disabled == o.side_panel_disabled &&
          background_color == o.background_color &&
          button_color == o.button_color &&
          text_color == o.text_color &&
          text_button_color == o.text_button_color &&
          disabled_notifications == o.disabled_notifications &&
          email_logo_disabled == o.email_logo_disabled &&
          email_header_text_disabled == o.email_header_text_disabled &&
          email_footer_signature_disabled == o.email_footer_signature_disabled &&
          email_expiration_text_disabled == o.email_expiration_text_disabled &&
          redirect_urls == o.redirect_urls
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, landing_page_disabled, side_panel_disabled, background_color, button_color, text_color, text_button_color, disabled_notifications, email_logo_disabled, email_header_text_disabled, email_footer_signature_disabled, email_expiration_text_disabled, redirect_urls].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        YousignClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
